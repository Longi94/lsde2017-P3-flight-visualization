// automatically generated by the FlatBuffers compiler, do not modify

package in.dragonbra.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FlightFb extends Table {
  public static FlightFb getRootAsFlightFb(ByteBuffer _bb) { return getRootAsFlightFb(_bb, new FlightFb()); }
  public static FlightFb getRootAsFlightFb(ByteBuffer _bb, FlightFb obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FlightFb __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double timestamps(int j) { int o = __offset(4); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int timestampsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer timestampsAsByteBuffer() { return __vector_as_bytebuffer(4, 8); }
  public float longitudes(int j) { int o = __offset(6); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int longitudesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer longitudesAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public float latitudes(int j) { int o = __offset(8); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int latitudesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer latitudesAsByteBuffer() { return __vector_as_bytebuffer(8, 4); }
  public float altitudes(int j) { int o = __offset(10); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int altitudesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer altitudesAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public String identity() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer identityAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }

  public static int createFlightFb(FlatBufferBuilder builder,
      int timestampsOffset,
      int longitudesOffset,
      int latitudesOffset,
      int altitudesOffset,
      int identityOffset) {
    builder.startObject(5);
    FlightFb.addIdentity(builder, identityOffset);
    FlightFb.addAltitudes(builder, altitudesOffset);
    FlightFb.addLatitudes(builder, latitudesOffset);
    FlightFb.addLongitudes(builder, longitudesOffset);
    FlightFb.addTimestamps(builder, timestampsOffset);
    return FlightFb.endFlightFb(builder);
  }

  public static void startFlightFb(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addTimestamps(FlatBufferBuilder builder, int timestampsOffset) { builder.addOffset(0, timestampsOffset, 0); }
  public static int createTimestampsVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startTimestampsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addLongitudes(FlatBufferBuilder builder, int longitudesOffset) { builder.addOffset(1, longitudesOffset, 0); }
  public static int createLongitudesVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startLongitudesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLatitudes(FlatBufferBuilder builder, int latitudesOffset) { builder.addOffset(2, latitudesOffset, 0); }
  public static int createLatitudesVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startLatitudesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAltitudes(FlatBufferBuilder builder, int altitudesOffset) { builder.addOffset(3, altitudesOffset, 0); }
  public static int createAltitudesVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startAltitudesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIdentity(FlatBufferBuilder builder, int identityOffset) { builder.addOffset(4, identityOffset, 0); }
  public static int endFlightFb(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

